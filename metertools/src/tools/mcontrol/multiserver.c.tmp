/*
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Library General Public License as
 *   published by the Free Software Foundation; either version 2 of the
 *   License, or (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Library General Public License for more details.
 *
 *   For a copy of the GNU Library General Public License
 *   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 *   Boston, MA 02111-1307, USA.  or go to http://www.gnu.org
 *
 * $Id: mlogger.c,v 1.1.1.1 2007/02/07 15:07:23 fengx Exp $
 */

/*
 * Use select to read from 1 file descriptor (and wait on kbd input for stop)
 * based on Serial Programming Guide for POSIX Operating Systems
 */
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <sys/poll.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/time.h>
#include <syslog.h>
#include <errno.h>
#include <libgen.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <pthread.h>
#ifdef HAVE_CONFIG_H
#   include "config.h"
#endif
#include "passivesock.h"
#include "meter.h"

#include "watts_up.h"

/* thread stack size for servicing new connections */
#define THREAD_STACK_SIZE		65535L

/* for power measurements, simulate this number for volts */
#ifndef SIM_VOLTS
#   define SIM_VOLTS			110.0
#endif

/* maximum number of connections handled by server */
#ifndef MAXCONNS
#   define MAXCONNS			10
#endif

#define	DEFAULT_METER_PORT	6998

extern int errno;
extern char *optarg;
extern int optind, opterr, optopt;

extern int mdebug;

#define DEFAULT_CMD		NETMETER_CMD_ENERGY
#define DEFAULT_COUNT		1
#define DEFAULT_DELAY		1000
#define DEFAULT_ACCURACY	0

#define NUM_ACTIVE_NIDQ_CHANNELS	25

static int finished = 0;

static int baseconv = 0;
static int units = 1;
static int accuracy = DEFAULT_ACCURACY;

pthread_mutex_t    mutex = PTHREAD_MUTEX_INITIALIZER;
//pthread_mutex_t    netmeter_mutex = PTHREAD_MUTEX_INITIALIZER;

/* prototypes */
void *request_handler(void *arg);
void integrate(struct timeval begin, struct timeval end, mm_t *mm,
   mm_t *volts, float *interval, float *energy);
void initialize(pthread_t *thread, unsigned short port);
void *client_req(void *arg);
void show_usage(char *argv[]);
int monitor(int type, char *serialport, FILE *output, int count,
   float sim_volts, unsigned int to_sec);
unsigned int monitor_netmeter(void *arg);

typedef struct {
   unsigned int id;
   pthread_t thread;
   short int sock;
   struct sockaddr_in client;
} connection_t;

static connection_t *connection;
static float power;
static unsigned int cumulative_energy;
static int running = 1;
static int console = 0;
static mm_t last_mm = { 0.0, 0, 0 };

typedef struct {
    double pre_ts;
    double ts;

    float time_interval;
    float thresh;

    unsigned int sys_power;
    unsigned int pre_sys_power;

    unsigned int num_nidaq_chs;

    unsigned int nidaq_powers[32];
    unsigned int pre_nidaq_powers[32];

    unsigned int sys_cumulative_energy;
    unsigned int nidaq_cumulative_energy[32];
} timely_energy;

static timely_energy timely_wattsup, timely_nidaq;

typedef struct {
    char *mname;
    char *host;
    unsigned short  port;
    unsigned int num_chs;
    int delay;
    int count;
    timely_energy *timely_file;
} netmeter_paras;

static netmeter_paras net_wattsup = {"wattsup", "192.168.254.109", 6999, 1, 1000, 0, (timely_energy *)&timely_wattsup};
static netmeter_paras net_nidaq = {"nidaq", "192.168.254.108", 6999, 25, 20, 0, (timely_energy *)&timely_nidaq};

void send_reading(int s) {
   static unsigned int msgsz = sizeof(netmeter_req_t);
   netmeter_req_t msg;
   int r;

   msg.cmd = NETMETER_CMD_READ;
   msg.units = last_mm.units;
   if ((r = write(s, &msg, msgsz)) != msgsz)
      fprintf(stderr, "send_reading: wrote only %i of %i bytes\n", r, msgsz);
}

void send_energy(int s) {
   static unsigned int msgsz = sizeof(netmeter_req_t);
   netmeter_req_t msg;
   int r;

   msg.cmd = NETMETER_CMD_ENERGY;
   msg.units = MUNITS_JOULES;
   if ((r = write(s, &msg, msgsz)) != msgsz)
      fprintf(stderr, "send_energy: wrote only %i of %i bytes\n", r, msgsz);
}

/*
 * Try to avoid any issues with network packets and data types and send
 * the return data last measured for power as the truncated version of
 * the real float value (milliwatts).
 */
void send_power(int s) {
   static unsigned int msgsz = sizeof(netmeter_req_t);
   netmeter_req_t msg;
   int r;
   mm_t mm;
   float value;

   char  pkg[1024], pwr_arry[128];
   unsigned int pkg_len, pwr_val;
   //unsigned int value;

   /* construct the return value */
   mm.value = power;
   mm.units = MUNITS_WATTS;
   value = meter_to_milli(&mm);

   /* setup the return data */
   msg.cmd = NETMETER_CMD_POWER;
   msg.num_chs = NUM_ACTIVE_NIDQ_CHANNELS+1; /*nidaq chans + sys power*/
   msg.units = MUNITS_MILLI | MUNITS_WATTS;

   memcpy(pkg, &msg, sizeof(netmeter_req_t));

   pthread_mutex_lock(&mutex);
   memcpy(pwr_arry, &(timely_wattsup.sys_power), sizeof(unsigned int));
   memcpy(pwr_arry+sizeof(unsigned int), &(timely_nidaq.nidaq_powers), sizeof(unsigned int)*NUM_ACTIVE_NIDQ_CHANNELS);
   pthread_mutex_unlock(&mutex);

   memcpy(pkg+sizeof(netmeter_req_t), pwr_arry, sizeof(unsigned int)*(NUM_ACTIVE_NIDQ_CHANNELS+1));

   pkg_len = sizeof(netmeter_req_t)+sizeof(unsigned int)*(NUM_ACTIVE_NIDQ_CHANNELS+1);

   if ((r = write(s, &pkg, pkg_len)) != pkg_len)
      fprintf(stderr, "send_power: wrote only %i of %i bytes\n", r, pkg_len);

   return;
}

void *request_handler(void *arg) {
   int s;
   struct sockaddr_in raddr;
   int rlen;
   int i;
   pthread_attr_t thr_attr;
   unsigned short port;
   struct pollfd pfd;

   port = (unsigned short)(int)arg;
   printf("listening on port %i for clients\n", port);
   pfd.fd = s = tcp_passive_port(port, 5);
   if (s == -1)
      return (void *)-1;
   pfd.events = POLLIN;
   if (pthread_attr_init(&thr_attr)) {
      perror("pthread_attr_init");
      exit(1);
   }
   if (pthread_attr_setstacksize(&thr_attr, THREAD_STACK_SIZE)) {
      perror("pthread_attr_setstacksize");
      exit(1);
   }
   while (running) {
      memset(&raddr, 0, sizeof(raddr));
      rlen = sizeof(raddr);
      for (i = 0; ; i++) {
         if (i > MAXCONNS) {
            struct timespec req, rem;
            req.tv_sec = 1;
            req.tv_nsec = 0;
            nanosleep(&req, &rem);
            i = 0;
            continue;
         }
         if (connection[i].sock == 0)
            break;
      }
      poll(&pfd, 1, 1000);
      if (pfd.revents == POLLIN) {
         connection[i].sock = accept(s, (struct sockaddr *)&raddr, &rlen);
         if (connection[i].sock < 0) {
            connection[i].sock = 0;
            fprintf(stderr, "connection %d: error accept: %s\n", i,
               strerror(errno));
            continue;
         } else {
printf("request_handler: connection(%d) threading client_req\n", i);
            if (pthread_create(&connection[i].thread, &thr_attr,
                  client_req, (void *)i) != 0) {
               fprintf(stderr, "connection %d: error pthread_create: %s\n",
                  i, strerror(errno));
               close(connection[i].sock);
               connection[i].sock = 0;
            }
         }
      }
   }
   close(s);

   return 0;
}

#define	MSG_BUF_SIZE	64
#define MAX_MSG_SIZE    62  
#define NEW_LOG_FILE    20  
#define NEW_SESSION     21  
#define END_LOG_FILE    22  
#define END_SESSION     23  
#define CHG_WORKING_DIR 24  

typedef struct control_msg
{
    char    cmd;
	char    len; 
	char    msg[MAX_MSG_SIZE]; 
}control_msg_t;

static int logging = 0;
static FILE *fplog = 0;

void *client_req(void *arg) {
   char msgbuf[MSG_BUF_SIZE];
   netmeter_req_t msg;                /* message received from peer */
   control_msg_t *cmsg;                /* message received from peer */
   fd_set cli_fdset;
   int id = (int)arg;                 /* connection id number in array */
   ssize_t size = 0;                  /* amount of data read from socket */
   struct sockaddr_in fsin;           /* socket info of connected peer */
   int alen = sizeof(fsin);           /*   useful for debugging */
   int len;
   int rc, connected = 1;                 /* loop while connected */
   struct timeval start, stop;        /* track timings for connections */
   unsigned int hr = 0, min = 0, sec; /* connection service time info */
   unsigned long commands = 0;        /* number of commands serviced */

   gettimeofday(&start, NULL);
   connection[id].id = pthread_self();
   pthread_detach(connection[id].id);
   if (getpeername(connection[id].sock, (struct sockaddr *)&fsin, &alen) == -1)
      return (void *)-1; /* client abort */
   printf("connection %d: start client %s\n", id, inet_ntoa(fsin.sin_addr));
   while (running && connected) {

      FD_ZERO(&cli_fdset);
      FD_SET(connection[id].sock, &cli_fdset);

      rc = select(connection[id].sock+1, &cli_fdset, NULL, NULL, NULL);
      if (rc < 0) {
	  fprintf(stderr, "client_req: select error.\n");
	  connected = 0;
      }

      memset(msgbuf, 0, sizeof(msgbuf));
      memset(&msg, 0, sizeof(msg));

      if(FD_ISSET(connection[id].sock, &cli_fdset) == 0)
	continue;

      if ((size = read(connection[id].sock, msgbuf, sizeof(msgbuf))) == -1 ){
         fprintf(stderr, "connection %d: error request size %d errno %d\n",
            id, size, errno);
         connected = 0;
//      } else if (size == 0){
//	continue;
      } else if (!running) {
         connected = 0;
      } else {

	if (size!=0 && (size % sizeof(netmeter_req_t))==0) /* receive multiple package at a time, read the latest one. */
	     size = sizeof(netmeter_req_t);

	 if ( size == sizeof( netmeter_req_t )){
		 strncpy((char *)&msg, (char *)msgbuf, sizeof(msg));
         switch(msg.cmd) {
            case NETMETER_CMD_ENERGY:
               send_energy(connection[id].sock); commands++;
               break;
            case NETMETER_CMD_POWER:
               send_power(connection[id].sock); commands++;
               break;
            case NETMETER_CMD_READ:
               send_reading(connection[id].sock); commands++;
               break;
            case NETMETER_CMD_RESET:
               cumulative_energy = 0;
               commands++;
               break;
            case NETMETER_CMD_QUIT: /* gracefully exit */
               connected = 0;
               break;
            default:
               fprintf(stderr, "connection %d: error unknown command %i\n",
                  id, msg.cmd);
               connected = 0;
               break;
		 }
		 }else if ( size > 2 ){
		 	cmsg = (control_msg_t *)msgbuf;
			len = cmsg->len > MAX_MSG_SIZE-1 ? cmsg->len :  MAX_MSG_SIZE-1;
			cmsg->msg[len] = '\0';
			printf("msg from %s (size=%d): {cmd = %d len = %d txt = %s}\n", 
				inet_ntoa(fsin.sin_addr), size, cmsg->cmd, cmsg->len, cmsg->msg);

			switch( cmsg->cmd ){
				case NEW_LOG_FILE:
					if ( fplog != 0 ){
						logging = 0;
						fclose( fplog );
						fplog = 0;
					}
				    if( (fplog = fopen(cmsg->msg, "w+")) == NULL) {
							fprintf(stderr, "Can not create file :%s (%s)\n", cmsg->msg, strerror(errno)); 
							logging = 0;
							fplog = 0;
					}
					else{
						fprintf( fplog, "[BEGIN_LOG: %.3f %s %s ]\n", start.tv_sec + start.tv_usec * 1.0e-6, cmsg->msg, inet_ntoa(fsin.sin_addr));
						fflush( fplog );
						logging = 1;
					}
					break;
				case END_LOG_FILE:
					logging = 0;
					if ( fplog!=0 ){
						fclose(fplog);
					}
					fplog = 0;
					break;
				case NEW_SESSION:
					if ( fplog!=0){
						fprintf(fplog, "[BEGIN_SESSION: %s %.3f]\n", cmsg->msg, start.tv_sec + start.tv_usec * 1.0e-6);
						fflush(fplog);
					}
					else {
						fprintf(stderr, "no valid log file");
						logging = 0;
						fplog = 0;
					}
					break;
				case END_SESSION:
					if ( fplog != 0 ){
						fprintf(fplog, "[END_SESSION: %s %.3f]\n", cmsg->msg, start.tv_sec + start.tv_usec * 1.0e-6);
						fflush(fplog);
					}
					else {
						fprintf(stderr, "no valid log file");
						logging = 0;
						fplog = 0;
					}
					break;
				case CHG_WORKING_DIR:
					if ( chdir( cmsg->msg ) == 0 ){
						fprintf(stdout, "change working directory to %s\n", cmsg->msg);
					}
					else {
						fprintf(stderr, "can not access directory: %s\n", cmsg->msg);
					}
					break;
				default:
					fprintf(stderr, "unknow control command %d\n", cmsg->cmd);
					break;
			}
			connected = 0;
		 }else{
		 	fprintf(stderr, "unexpected message size %d\n", size);
			connected = 0;
		 }

      }
   }
//fprintf(stderr, "running(%d) connected(%d)\n", running, connected);
   close(connection[id].sock);
   connection[id].sock = 0;
   gettimeofday(&stop, NULL);
   sec = stop.tv_sec - start.tv_sec;
   if (sec >= 3600) { /* seconds per hr */
      hr = sec / 3600;
      sec -= hr * 3600;
   }
   if (sec >= 60) { /* seconds per min */
      min = sec / 60;
      sec -= min * 60;
   }
   printf("connection %d: stop service time %uh:%um:%.3fs for %lu command%s\n",
      id, hr, min, sec + (stop.tv_usec / 1000000.0), commands,
      commands == 1 ? "": "s");

   pthread_exit(0);
}

/* terminatiOn signal received */
void signal_exit(int sig) {
   running = 0;
}

/* initialize the signal handlers and additional threads */
void initialize(pthread_t *thread, unsigned short port) {
   signal(SIGINT, signal_exit);
   if (port == 0)
      return;
   connection = (connection_t *)calloc(MAXCONNS, sizeof(connection_t));
   if (connection == NULL) {
      fprintf(stderr, "out of memory creating %d connections\n", MAXCONNS);
      exit(1);
   }
   if (pthread_create(thread, NULL, request_handler, (void *)(int)port) != 0) {
      fprintf(stderr, "unable to start network listener: %s\n",
         strerror(errno));
      exit(1);
   }
}

/* perform simple rectangular integration */
void integrate(struct timeval begin, struct timeval end, mm_t *mm,
      mm_t *volts, float *interval, float *energy) {
   if (mm == NULL || volts == NULL)
      return;
   if (!(mm->units & MUNITS_WATTS))
      power = mm->value * volts->value;
   else
      power = mm->value;
   *interval = (end.tv_sec - begin.tv_sec) +
      ((end.tv_usec - begin.tv_usec) / 1000000.0);
   *energy = power * (*interval);
   cumulative_energy += *energy;
}

int main(int argc, char *argv[]) {
   int count = 0;
   FILE *output = NULL;
   int c;
   float volts = SIM_VOLTS;
   char *serialport = SERIAL_PORT;
   unsigned short port = DEFAULT_METER_PORT;
   pthread_t thread, netmeter_thread;
   unsigned int to_sec = METER_TIMEOUT;
   int type = METER_TYPE;
   int rc;

   opterr = 0;
   while ((c = getopt(argc, argv, "m:t:s:p:v:l:c:doh")) != -1) {
      switch (c) {
         case 'm':
            if ((type = meter_type(optarg)) == 0) {
               fprintf(stderr, "unknown meter %s for -m\n", optarg);
               exit(1);
            }
            break;
         case 'd':
            mdebug = 1;
            break;
         case 't':
            to_sec = atoi(optarg);
            break;
         case 'p':
            port = atoi(optarg);
            break;
         case 's':
            serialport = strdup(optarg);
            break;
         case 'v':
            volts = atof(optarg);
            break;
         case 'l':
            if (optarg[0] != '-') {
               output = fopen(optarg, "a");
               if (output == NULL) {
                  perror(argv[1]);
                  exit(1);
               }
            }
            break;
         case 'o':
            console = 1;
            break;
         case 'c':
            count = atoi(optarg);
            break;
         case 'h':
            show_usage(argv);
            exit(0);
         default:
            fprintf(stderr, "unknown option -%c, use -h for help\n", optopt);
            exit(1);
      }
   }

   initialize(&thread, port);
   //rc = monitor(type, serialport, output, count, volts, to_sec);
   //monitor_netmeter(count, 1000, "192.168.4.69", NETMETER_CMD_POWER, 6999);
   //monitor_netmeter(count, 20, "192.168.254.108", NETMETER_CMD_POWER, 6999);
   if (pthread_create(&netmeter_thread, NULL, monitor_netmeter, (void *)&net_nidaq) != 0) {
      fprintf(stderr, "unable to start network listener: %s\n",
         strerror(errno));
      exit(1);
   }

   monitor_netmeter((void *)&net_wattsup);
   if (port) {
      printf("disconnecting any clients...\n");
      pthread_join(thread, NULL);
   }
   pthread_join(netmeter_thread, NULL);
   printf("finished.\n");
   if (output != NULL)
      fclose(output);

   return rc;
}

int merge_wattsup_nidaq_pwr(int is_nidaq, double ts, timely_energy *wattsup, timely_energy *nidaq)
{
	int i;
	double k, p;

//printf("1.1\n");
  pthread_mutex_lock(&mutex);

  if (is_nidaq)
	{
#if 0
		//if (wattsup->pre_sys_power <= 0 || wattsup->sys_power <= 0)
		//	return 0;
		
		if (wattsup->ts == wattsup->pre_ts)
			k = 0.0;
		else
			k = ( ts - wattsup->pre_ts) / (wattsup->ts - wattsup->pre_ts);

		p = (double) (wattsup->pre_sys_power) + (k * (double)(wattsup->sys_power - wattsup->pre_sys_power));
printf("k[%f] %d %d %d\n", k, wattsup->pre_sys_power, wattsup->sys_power, nidaq->sys_power);
		nidaq->sys_power = (unsigned int) p;
#endif
    nidaq->sys_power = wattsup->sys_power;
	}
  else
	{
#if 0
		if (nidaq->pre_nidaq_powers[0] <= 0 || nidaq->nidaq_powers[0] <= 0)
			return 0;

		if (nidaq->ts == nidaq->pre_ts)
			k = 0.0;
		else
			k = ( ts - nidaq->pre_ts) / (nidaq->ts - nidaq->pre_ts);

//printf("k[%f] %d\n", k, nidaq->pre_nidaq_powers[0]);

		for (i=0; i<nidaq->num_nidaq_chs; i++) {
			p = nidaq->pre_nidaq_powers[i] + k * (nidaq->nidaq_powers[i] - nidaq->pre_nidaq_powers[i]);
			wattsup->nidaq_powers[i] = (unsigned int) p;
#endif

		for (i=0; i<nidaq->num_nidaq_chs; i++) {
			//p = nidaq->pre_nidaq_powers[i] + k * (nidaq->nidaq_powers[i] - nidaq->pre_nidaq_powers[i]);
			wattsup->nidaq_powers[i] = nidaq->nidaq_powers[i];

		}
	}

  pthread_mutex_unlock(&mutex);
//printf("2.1\n");
  
/*
        if ( meter_profile.time == prev_meter_profile.time)
             k = 0.0;
        else
             k = ( time - prev_meter_profile.time) / (meter_profile.time - prev_meter_profile.time);
        for (int i=0; i < num_meter_powers; ++i) {
                p = prev_meter_profile.powers[i] + k * (meter_profile.powers[i] - prev_meter_profile.powers[i]);
                cout << " " << p ;
        }

        if (nidaq_profile.time == prev_nidaq_profile.time)
             k =0;
        else
             k = (time - prev_nidaq_profile.time) / (nidaq_profile.time - prev_nidaq_profile.time);
        for (int i=0; i < num_nidaq_powers; ++i) {
                p = prev_nidaq_profile.powers[i] + k * (nidaq_profile.powers[i] - prev_nidaq_profile.powers[i]);
                cout << " " << p ;
        }
*/
	return 0;
}

int store_last_reading(timely_energy *netmeter)
{
	int i;
//printf("1\n");
	//pthread_mutex_lock(&mutex);

	netmeter->pre_ts = netmeter->ts;
	netmeter->pre_sys_power = netmeter->sys_power;

  	for(i=0; i<netmeter->num_nidaq_chs; i++)
  	netmeter->pre_nidaq_powers[i] = netmeter->nidaq_powers[i];

	//pthread_mutex_unlock(&mutex);
//printf("2\n");
	return 0;
}

void statistic_nidaq_power(unsigned int *nidaq_pwr, int num_chs, int reset)
{
	static unsigned int pwr[64];
	static unsigned int samples=0;
	int i;

  //pthread_mutex_lock(&mutex);

	if (reset)
	{
     if (samples <= 0) return;

     for(i=0; i<num_chs; i++)
     		nidaq_pwr[i] = (unsigned int)(double)(pwr[i]/samples);

		 for(i=0; i<num_chs; i++)
		 		pwr[i] = 0;
		 samples = 0;

		 pthread_mutex_unlock(&mutex);

		 return;
	}

  for(i=0; i<num_chs; i++)
     pwr[i] += nidaq_pwr[i];
  samples++;

  //pthread_mutex_unlock(&mutex);

  return;
}

//unsigned int monitor_netmeter(int count, int delay, char *hostname, int cmd,
//      unsigned short port) {
unsigned int monitor_netmeter(void *arg) {
   netmeter_req_t msg;        /* for request to meter server */
   netmeter_paras *paras = (netmeter_paras *)arg;
   timely_energy *timely_netmeter;
   struct timespec ts;        /* for delays */
   struct timeval start, now; /* used for timestamps */
   unsigned int i = 0;        /* current number of requests received */
   //mm_t mm;                   /* meter measurement */
   mm_t mm[32];
   unsigned char *prefix;     /* prefix (if any) for the measurement */
   char format[5];            /* format specification for output */

   //char pkg[1024];
   unsigned int ch_pwr_readings[32];
   int j, r, sock;
   int loops = 0; 

   int count;
   int delay;
   char *hostname;
   int cmd = NETMETER_CMD_POWER;
   unsigned short port;
   unsigned int num_chs;

   //netmeter_paras *paras = (netmeter_paras *)arg;

   count = paras->count; 
   delay = paras->delay;
   hostname = paras->host;
   port = paras->port;
   num_chs = paras->num_chs;

   timely_netmeter = (timely_energy *)paras->timely_file;
   timely_netmeter->num_nidaq_chs = NUM_ACTIVE_NIDQ_CHANNELS; //16;

   if ((sock = netmeter_connect(hostname, port)) == -1) {
   	  fprintf(stderr, "netmeter_connect: %s\n", strerror(errno));
      running = 0;
      return -1;
   }
   msg.cmd = cmd;

   ts.tv_sec = delay / 1000;
   ts.tv_nsec = (delay % 1000) * 1000000;
   gettimeofday(&start, NULL);
   snprintf(format, sizeof(format), "%%.%df", accuracy);

   if (count)
      loops = count - 1;

   //while ((count == 0 || (i < count)) && !finished) {
   while (running && loops >= 0) {
      i++;
      //netmeter_request(&msg);
      r = netmeter_request(sock, &msg, ch_pwr_readings);
      if (r < 0) {
         fprintf(stderr, "netmeter_request: request to %s failed %d\n", hostname, r);
         nanosleep(&ts, NULL);
         continue;
      }
      netmeter_convert(&msg, mm, ch_pwr_readings);
/*
      if (timestamp) {
         gettimeofday(&now, NULL);
         printf("%u %.3f ", (unsigned int)now.tv_sec,
            (now.tv_sec - start.tv_sec) + (now.tv_usec / 1000000.0f));
      }

      if (baseconv)
         meter_to_base(&mm, &mm);
      printf(format, mm.value);
      if (units) {
         printf(" ");
         if ((prefix = meter_units_prefix(&mm)) != NULL)
            printf("%s", prefix);
         printf("%s\n", meter_units_measure(&mm));
      } else {
         printf("\n");
      }
*/

      store_last_reading(timely_netmeter);

      //timely_netmeter->ts = msg.last_read;
      gettimeofday(&now, NULL);
			timely_netmeter->ts = now.tv_sec + now.tv_usec * 1.0e-6;

      if(msg.num_chs > 1) /* nidaq netmeter: component powers */
			{
      	for (j=0; j<msg.num_chs; j++)
      	{
          timely_netmeter->nidaq_powers[j] = ch_pwr_readings[j];
					//printf("%d ", timely_netmeter->nidaq_powers[j]);
				}
				merge_wattsup_nidaq_pwr(1, timely_netmeter->ts, &timely_wattsup, &timely_nidaq);

				statistic_nidaq_power(timely_netmeter->nidaq_powers, msg.num_chs, 0);
/*
				printf("%f ", timely_netmeter->ts);
				printf("%d ", timely_netmeter->sys_power);
      	for (j=0; j<msg.num_chs; j++)
					printf("%d ", timely_netmeter->nidaq_powers[j]);

				printf("\n");
*/
			}
      else /* wattsup netmeter: system power */
      {
      	timely_netmeter->sys_power = ch_pwr_readings[0];
      	merge_wattsup_nidaq_pwr(0, timely_netmeter->ts, &timely_wattsup, &timely_nidaq);

				statistic_nidaq_power(timely_netmeter->nidaq_powers, 32, 1);
/*
				printf("%f ", timely_netmeter->ts);
				printf("%d ", timely_netmeter->sys_power);
      	for (j=0; j<25; j++)
					printf("%d ", timely_netmeter->nidaq_powers[j]);

				printf("\n");
*/
			}
/*
      printf("%f ", msg.last_read);
      for (j=0; j<msg.num_chs; j++)
         printf("%d ", ch_pwr_readings[j]);
      printf("\n");
*/
      if (count == 0 || (i != count))
         nanosleep(&ts, NULL);
/*
      if (mm[0].value > 0.0) {
         float interval, energy;

         if (gettimeofday(&tv, NULL) == -1) {
            fprintf(stderr, "gettimeofday error: %s\n", strerror(errno));
            loops = -1;
         } else

         {
            integrate(last_tv, tv, &mm[0], &volts, &interval, &energy);
            if (output != NULL)
               fprintf(output, "%u %f %f %f %f %f %f\n",
                  (unsigned int)tv.tv_sec,
                  (tv.tv_sec - begin_tv.tv_sec) + (tv.tv_usec / 1000000.0),
                  mm[0].value, volts.value,
                  power, interval, energy);
            memcpy(&last_tv, &tv, sizeof(struct timeval));
         }
         if (count)
            loops--;
         if (output != NULL && (loops % 10 == 0))
            fflush(output);
      }
*/
   }
   running = 0;
   netmeter_close(sock);

   return i;
}

int monitor(int type, char *serialport, FILE *output, int count,
      float sim_volts, unsigned int to_sec) {
   struct termios oldtio;
   int fd;
   int rc = 0;
   mm_t *mm, volts;
   struct timeval begin_tv, tv, last_tv;
   double ts;
   int loops = 0;
   int num;
   int i;

   if (count)
      loops = count - 1;
   if ((num = meter_alloc_mms(type, &mm)) == -1) {
      fprintf(stderr, "meter_alloc_mms: %s\n", strerror(errno));
      return -1;
   }

//   if ((fd = meter_init(serialport, &oldtio, type)) == -1) {
   if ((fd = wattsup_usb_meter_init(serialport, &oldtio, type)) == -1) {
//End
      fprintf(stderr, "meter_init: %s\n", strerror(errno));
      running = 0;
      return -1;
   }
   volts.value = sim_volts;
   for (i = 0; i < num; i++)
      mm[i].to_sec = to_sec;
   volts.to_sec = to_sec;
   cumulative_energy = 0;
   gettimeofday(&begin_tv, NULL);
   memcpy(&last_tv, &begin_tv, sizeof(struct timeval));

   while (running && loops >= 0) {
			//Elson
			rc = watts_up_usb_meter_read(fd, type, mm);
      //rc = meter_read(fd, type, mm);
      if (rc == -1) {
         fprintf(stderr, "meter_read: %s\n", strerror(errno));
         loops = -1;
         break;
      }
      last_mm.units = mm[0].units;
      last_mm.value = mm[0].value;
      if (rc != 1) { /* no timeout and need to display */
	  	 gettimeofday(&tv, NULL);
		 ts = tv.tv_sec + tv.tv_usec * 1.0e-6;
		 if (console ){
		 	printf("%.2f ", ts);
         	for (i = 0; i < num; i++)
            	printf("%f %s%s ", mm[i].value, meter_units_prefix(&mm[0]),
               		meter_units_measure(&mm[i]));
         	printf("\n");
		 }
		 if (logging && fplog!=0){
		 	fprintf(fplog, "%.2f ", ts);
         	for (i = 0; i < num; i++)
            	fprintf(fplog, "%f %s%s ", mm[i].value, meter_units_prefix(&mm[0]),
               		meter_units_measure(&mm[i]));
         	fprintf(fplog, "\n");
			fflush(fplog);
		 }
      }
      if (mm[0].value > 0.0) {
         float interval, energy;

         if (gettimeofday(&tv, NULL) == -1) {
            fprintf(stderr, "gettimeofday error: %s\n", strerror(errno));
            loops = -1;
         } else {
            integrate(last_tv, tv, &mm[0], &volts, &interval, &energy);
            if (output != NULL)
               fprintf(output, "%u %f %f %f %f %f %f\n",
                  (unsigned int)tv.tv_sec,
                  (tv.tv_sec - begin_tv.tv_sec) + (tv.tv_usec / 1000000.0),
                  mm[0].value, volts.value,
                  power, interval, energy);
            memcpy(&last_tv, &tv, sizeof(struct timeval));
         }
         if (count)
            loops--;
         if (output != NULL && (loops % 10 == 0))
            fflush(output);
      }
   }
   running = 0;
   //Elson
   //meter_close(fd, &oldtio);
	 watts_up_usb_meter_read_close();

   return rc;
}

void show_usage(char *argv[]) {
   char *name = basename(argv[0]);

   printf("Usage: %s [-l log] [-c count] [-v volts] [-s serialport] [-p port] [-t timeout] [-m meter] [-o] [-d]\n", name);
   printf("       %s -h\n", name);
   printf("\t-o             Output the value read to standard out\n");
   printf("\t-d             Turn on debugging\n");
   printf("\t-t timeout     Timeout waiting for data from meter (sec) [%d]\n",
      METER_TIMEOUT);
   printf("\t-l log         Write data to the indicated log file\n");
   printf("\t-c count       Read count values and then stop, 0 for no limit [0]\n");
   printf("\t-v volts       Simulate the indicated volts for power [%.1f]\n",
      SIM_VOLTS);
   printf("\t-m meter       Name of the meter (see README) [%s]\n",
      meter_name(METER_TYPE));
   printf("\t-s serialport  Serial port for meter [%s]\n", SERIAL_PORT);
   printf("\t-p port        Network port for clients, 0 to disable [%d]\n",
      METER_TCP_PORT);
   printf("\t-h             This help screen\n");
}

